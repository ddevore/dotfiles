" BUNDLE MANAGEMENT ------------------------------------------------------------------------------------------------------------ {{{

" Explicitly get out of vi-compatible mode.
set nocompatible

" Vundle stuff
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Navigation
"Plugin 'wincent/command-t'
"Bundle 'majutsushi/tagbar'
"Plugin 'scrooloose/nerdtree'
"Plugin 'fholgado/minibufexpl.vim'
" unite uses vimproc
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimfiler.vim'
Plugin 'Shougo/unite-outline'
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Utilities
"Plugin 'ervandew/supertab'
Plugin 'Rykka/colorv.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'xolox/vim-session'
Plugin 'xolox/vim-misc'
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim'
Plugin 'tomtom/tcomment_vim'

" Git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" Snippets
"Plugin 'drmingdrmer/xptemplate'

" Searching
Plugin 'henrik/vim-indexed-search'

" Visual
Plugin 'bling/vim-airline'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Yggdroot/indentLine'

" Languages
Plugin 'derekwyatt/vim-scala'

" Colorschemes
Plugin 'croaker/mustang-vim'
Plugin 'nanotech/jellybeans.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'reedes/vim-colors-pencil'

call vundle#end()

" Load filetype plugins/indent settings.
filetype plugin indent on

" }}}



" BEHAVIORS -------------------------------------------------------------------------------------------------------------------- {{{

" Turn on syntax coloring.
syntax enable

" Remap the leader key.
let mapleader = ","

" Read when the file has changed outside of vim.
set autoread

" You can change buffers without saving.
set hidden

" Wait 300 milliseconds for mapped key.
set timeoutlen=300

" Use sysetm clipboard.
set clipboard=unnamed

" Save changes on buffer switch.
set autowrite

" Number of items to remember in history
set history=1000

" Set backup
set backup

" Backup file directory.
set backupdir=~/.vim/vim-backup//

" Swap file directory.
set directory=~/.vim/vim-tmp//

" Tells Vim to create <FILENAME>.un~ files whenever you edit a file. These files contain undo information so you can undo previous
" actions even after you close and reopen the file.
set undodir=~/.vim/vim-undo//
set undofile

" Content directory is always matching the content of the active window.
" NOTE: This messes up fuzzyfinder. You always want the recursive search to start from the directory that you start vim from.
"set autochdir

" Lower case u is cool for undo, but ctrl-r for redo sucks, so use Upper case U instead.
noremap U <C-R>

" fast terminal
set ttyfast

" Turn mouse on.
set mouse=a

" Remember last position in file.
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Quick edit my vimrc.
nnoremap <leader>ev :e $MYVIMRC<CR>

" Set the view directory.
set viewdir=~/.vim/vim-view//

" Save view on exit, will persist folds.
au BufWinLeave * silent! mkview

" Load view on enter, will remember folds.
au BufWinEnter * silent! loadview

" }}}

" COLOR OPTIONS ---------------------------------------------------------------------------------------------------------------- {{{

" Important for dark colorthemes.
set background=dark

" Set the windows transparency. I don't use this as I rely on the shell for transparency.
"set transparency=10

" 256 color support.
set t_Co=256

" Set color scheme.
colorscheme pencil
"colorscheme wombat256
"colorscheme mustang
"colorscheme molokai
"colorscheme badwolf
"colorscheme mustang

"colorscheme jellybeans
"let g:jellybeans_overrides = {
"\    'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
"\              'ctermfg': 'Black', 'ctermbg': 'Yellow',
"\              'attr': 'bold' },
"\}


"colorscheme solarized
"let g:solarized_termcolors=256
"let g:solarized_underline = 0
"let g:solarized_contrast = 'high'
"let g:solarized_visibility = 'low'

" }}}

" FOLDING ---------------------------------------------------------------------------------------------------------------------- {{{

"set foldlevelstart=0
set foldlevel=1
set foldmethod=marker
set foldmarker={{{,}}}

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" "Refocus" folds
"nnoremap ,z zMzvzz

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
"nnoremap zO zCzO

" Custom method that changes the look and feel of the fold.
function! MyFoldText() " {{{
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('          ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}67

" SEARCH OPTIONS --------------------------------------------------------------------------------------------------------------- {{{

" Set the search to wrap lines.
set wrapscan

" Case insensitive searching.
set ignorecase

" Case sensitive when given caps.
set smartcase

" Highlight search results.
set hlsearch

" Incremental highlight as search is typed.
set incsearch

" Toggle / clear highlights.
"nnoremap <leader>h :set invhls hls?<CR>
nnoremap <leader>h :noh<cr>

" }}}

" NAVIGATION OPTIONS ----------------------------------------------------------------------------------------------------------- {{{

" Go to end of line.
imap <leader><right> <esc>$
nnoremap <leader><right> $
vnoremap <leader><right> $

" Go to beggining of line.
imap <leader><left> <esc>0
nnoremap <leader><left> 0
vnoremap <leader><left> 0

" User tab instead of % to switch between matching pairs.
nnoremap <tab> %
vnoremap <tab> %

" Make cursor keys wrap (] and \ are for right and left arrows).
set whichwrap=h,l,[<]>],[<\>]

" Backspace over autoindent, end of line (to join lines), and pre-existing text.
set backspace=indent,eol,start

" Split window vertically.
nnoremap <leader>sv <C-w>v
" Move to the left split window.
nnoremap <leader><leader><left> <C-w><left>
" Move to the right split window.
nnoremap <leader><leader><right> <C-w><right>
" Split window horizontally.
nnoremap <leader>sh <C-w>s
" Move to the bottom split window.
nnoremap <leader><leader><down> <C-w><down>
" Move to the top split window.
nnoremap <leader><leader><up> <C-w><up>

" }}}

" FILE TYPE OPTIONS ------------------------------------------------------------------------------------------------------------ {{{

augroup ft_scala " {{{
  au!
  " Set scalacomplete to function scalacomplete#Complete in vim/autoload/scalacomplete.vim
  au FileType scala set omnifunc=scalacomplete#Complete
"  au FileType scala setlocal foldmethod=marker
"  au FileType scala setlocal foldmarker={,}
   au FileType scala setlocal foldmethod=indent
   au FileType scala setlocal foldnestmax=10
   au FileType scala setlocal nofoldenable
   au FileType scala setlocal foldlevel=1
   au FileType scala set tags=~/Workspace/scalatags
augroup END " }}}

" }}}

" MENUS AND OMNICOMPLETE OPTIONS ----------------------------------------------------------------------------------------------- {{{

" Used for completion based on syntax file - i don't use this
"set ofu=syntaxcomplete#Complete


" So completion popup does not select the first item, and typing new letters updates the completion list.
set completeopt=longest,menuone,preview

" Set menu for TAB key.
set wildmenu

" Complete only up to the point of ambiguity.
set wildmode=list:longest,full

" Ignore files and directory types. This is primarily for Command-T.
set wildignore=*/target/*,*.sublime-project,*.sublime-workspace

" When completing by tag, show the whole tag, not just the function name.
set showfulltag

" remap control-space to code complete
" NOTE: this comment must not be on the same line as the remap
" NOTE: Most unix terminals don't know what to do with the space bar so you must user <Nul> instead of <C-space> for no-gui
if has("gui_running")
  :inoremap <C-space> <C-x><C-o>
else
  :inoremap <Nul> <C-x><C-o>
"   :inoremap <leader><space> <C-x><C-o>
endif

" }}}

" TEXT FORMAT OPTIONS ---------------------------------------------------------------------------------------------------------- {{{

" Set encoding.
set encoding=utf-8

" Set column width.
"set columns=136

" Copy indent from current line when starting a new line.
set autoindent

" Set the text width to 132.
set textwidth=132

" Set the right margin.
set colorcolumn=+1

function! Tabstyle_spaces()

  " Use 2 spaces, interpret tab sa an indent.
  set softtabstop=2

  " number of spaces used for indent.
  set shiftwidth=2

  " Set tab width.
  set tabstop=2

  " Replace tabs with spaces.
  set expandtab

endfunction
call Tabstyle_spaces()

" }}}

" UI OPTIONS ------------------------------------------------------------------------------------------------------------------- {{{

" Set the current file name to the title.
set title

" Keep the cursor 8 lines from top and bottom when the page scrolls.
set scrolloff=8

" Highlight current line.
set cursorline

" Highlights matching braces|brackets|parens when the cursor is on a bracket.
" NOTE: Not used. I use matchpairs instead.
"set showmatch

" Highlight matching tags.
set matchpairs=(:),[:],{:},<:>

" Show line numbers.
set number

" turn word wrapping off
"set nowrap

" Wrap at word.
set linebreak

" Show break character when wrapping occurs.
set showbreak=↪

" List of invisible characters to be shown.
set list listchars=tab:»-,trail:·,nbsp:·,extends:»,precedes:«,eol:¬

"if &listchars ==# 'eol:$'
"  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
"  if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
"    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00ac,eol:\u00ac"
"  endif
"endif

" Display visible whitespaces as nice utf-8 dot
"set list
"set listchars=""
"set listchars=tab:→\ ,trail:·,extends:↷,precedes:↶,nbsp:█
" Toggle invisible characters.
nnoremap <leader>i :set list!<CR>

" Invisible character colors
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

" Setup the static line. I don't use this because I'm using powerline.vim instead.
"set statusline=%f%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\[HEX=\%02.2B]\ [POS=%l,%v][%p%%]\ [LEN=%L]
"set statusline=%-t%-m%-h%-r%-y\ buf\ %-n%=\ascii=\%03.3b\ hex=\%02.2B\ %l,%c\ %p%%\ %L
"set statusline=%f\ %m\ %r%{fugitive#statusline()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]
"set statusline=%f\ %m\ %r\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]

" Set status line position.
set laststatus=2

" Show the ruler in the status line.
set ruler

" Show the current mode in the status line.
set showmode

" Show informatin about the current command.
set showcmd
" }}}

" PLUGINS VIM-SESSION.VIM ------------------------------------------------------------------------------------------------------ {{{
" https://github.com/xolox/vim-session

"let g:session_autosave='prompt'
"let g:session_autoload='prompt'
nnoremap <leader>os :OpenSession<CR>
" }}}

" PLUGINS GITGUTTER.VIM -------------------------------------------------------------------------------------------------------- {{{
" https://github.com/airblade/vim-gitgutter

let g:gitgutter_sign_column_always = 0
let g:gitgutter_highlight_lines = 1
" }}}

" PLUGINS UNITE.VIM ------------------------------------------------------------------------------------------------------------ {{{
" https://github.com/Shougo/unite.vim

nmap <space> [unite]
nnoremap [unite] <nop>

let g:unite_data_directory = '~/.unite'

"Use start insert by default.
call unite#custom#profile('default', 'context', {
\   'start_insert' : 1,
\   'no_split' : 1,
\   'resize' : 0
\ })

" Finally figured out to to set the preview window height!
set previewheight=20

"call unite#custom#profile('default', 'context', {'no_split':1, 'resize':0})

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ '\.idea/',
      \ 'target/',
      \ ], '\|'))

"let g:unite_source_rec_async_command = 'ag --follow --nocolor --nogroup --hidden -g ""'
let g:unite_source_rec_async_command = 'ag --follow --nocolor --nogroup -g ""'

" File searching using <space>f
nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files -profile-name=buffer file_rec/async:!<cr>
"nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files -profile-name=buffer file_rec<cr>

" Buffer switching using <space>b
nnoremap <silent> [unite]b :<C-u>Unite -no-split -buffer-name=buffers buffer -quick-match<cr>

" Grepping using <space>/
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts =
  \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
let g:unite_source_grep_recursive_opt = ''
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>


" Function to close open unit window
function! s:unite_settings()
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  " Double taping <esc> closes unite
  nmap <silent> <buffer> <esc><esc> <plug>(unite_exit)
  imap <silent> <buffer> <esc><esc> <plug>(unite_exit)
  nnoremap <silent><buffer><expr> p
    \ empty(filter(range(1, winnr('$')),
    \ 'getwinvar(v:val, "&previewwindow") != 0')) ?
    \ unite#do_action('preview') : ":\<C-u>pclose!\<CR>"
endfunction
autocmd FileType unite call s:unite_settings()

" }}}

" PLUGINS UNITE-OUTLINE.VIM ---------------------------------------------------------------------------------------------------- {{{
" https://github.com/Shougo/unite-outline

"nnoremap [unite]o :Unite -no-split -start-insert -auto-preview outline<cr>
nnoremap [unite]o :Unite -no-split -auto-preview outline<cr>

" }}}

" PLUGINS VIMFILER ------------------------------------------------------------------------------------------------------------- {{{

nnoremap <silent> [unite]v   :<C-u>VimFiler<CR>
nnoremap          [unite]ff  :<C-u>VimFilerExplorer<CR>
let g:vimfiler_as_default_explorer = 1

function! s:vimfiler_settings()
  nmap <silent> <buffer> <esc><esc> <plug>(vimfiler_exit)
  imap <silent> <buffer> <esc><esc> <plug>(vimfiler_exit)
endfunction
autocmd FileType vimfiler call s:vimfiler_settings()
"autocmd VimEnter * VimFilerExplorer
" }}}

" PLUGINS COMMAND-T.VIM -------------------------------------------------------------------------------------------------------- {{{
" https://github.com/wincent/Command-T

" Remap command-t cancel.
"if &term =~ "xterm" || &term =~ "screen"
"  let g:CommandTCancelMap     = ['<ESC>','<C-c>']
"  let g:CommandTSelectNextMap = ['<C-n>','<C-j>','<ESC>OB']
"  let g:CommandTSelectPrevMap = ['<C-p>','<C-k>','<ESC>OA']
"endif
" }}}

" PLUGINS NEOCOMPLETE ---------------------------------------------------------------------------------------------------------- {{{

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Dictionaries
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'scala' : $HOME.'/dotfiles/vim/dict/scala.dict'
 \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" }}}

" PLUGINS NEOSNIPPETS ---------------------------------------------------------------------------------------------------------- {{{

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
"if has('conceal')
"  set conceallevel=2 concealcursor=i
"endif
" }}}

" PLUGINS INDENTLINE.VIM ------------------------------------------------------------------------------------------------------- {{{
" https://github.com/Yggdroot/indentLine

let g:indentLine_char='┆'

" }}}

" PLUGINS VIM-INDENT-GUIDES.VIM ------------------------------------------------------------------------------------------------ {{{
" https://github.com/nathanaelkane/vim-indent-guides
"
" Doesn't make sense to show the 1st level guide if left margin is a different color from background.
"let g:indent_guides_start_level=2

" Display indent guides on startup.
"let g:indent_guides_enable_on_vim_startup=1

" Indent guide size = 1 character.
"let g:indent_guides_guide_size=1

"let g:indent_guides_auto_colors=0

" The following settings are for solarized (colorscheme) support.
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

" The following settings are for mustang (colorscheme) support.
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#2d2d2d ctermbg=236
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2d2d2d ctermbg=236
" }}}

" PLUGINS TAGBAR.VIM ----------------------------------------------------------------------------------------------------------- {{{
" https://github.com/majutsushi/tagbar

" Toggle tagbar with \g.
"nnoremap <leader>g :TagbarToggle<CR>

"let g:tagbar_type_scala = {
"  \ 'ctagstype' : 'Scala',
"  \ 'kinds'     : [
"    \ 'p:packages:1',
"    \ 'V:values',
"    \ 'v:variables',
"    \ 'T:types',
"    \ 't:traits',
"    \ 'o:objects',
"    \ 'a:aclasses',
"    \ 'c:classes',
"    \ 'r:cclasses',
"    \ 'm:methods'
"  \ ]
"\ }
" }}}

" PLUGINS AIRLINE.VIM ---------------------------------------------------------------------------------------------------------- {{{
" https://github.com/bling/vim-airline

let g:airline_powerline_fonts = 1
let g:airline_theme = 'pencil'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
"}}}

" PLUGINS SUPERTAB.VIM --------------------------------------------------------------------------------------------------------- {{{

" avoid key conflict
"let g:SuperTabMappingForward = '<Plug>supertabKey'

" if nothing matched in xpt, try supertab
"let g:xptemplate_fallback = '<Plug>supertabKey'

" xpt uses <Tab> as trigger key
"let g:xptemplate_key = '<Tab>'

" use <tab>/<S-tab> to navigate through pum. Optional
" let g:xptemplate_pum_tab_nav = 1
"
" xpt triggers only when you typed whole name of a snippet. Optional
"let g:xptemplate_minimal_prefix = 'full'
" }}}

" PLUGINS XPTEMPLATE.VIM ------------------------------------------------------------------------------------------------------- {{{
" https://github.com/drmingdrmer/xptemplate

" Add xptemplate global personal directory value
"if has("unix")
"  set runtimepath+=~/.vim/xpt-personal
"endif
" }}}

" PLUGINS NERDTREE.VIM --------------------------------------------------------------------------------------------------------- {{{
" https://github.com/scrooloose/nerdtree/

"nnoremap <leader>e :NERDTreeToggle<CR>
"nnoremap <leader>nf :NERDTreeFind<CR>

""let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows = 1
"let NERDTreeShowBookmarks=1

" Change the NERDTree directory to the root node.
"let NERDTreeChDirMode=2
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" }}}

" PLUGINS MINIBUFEXPL.VIM ------------------------------------------------------------------------------------------------------ {{{
" https://github.com/fholgado/minibufexpl.vim

" Toggle minbufexplorer with Control-b.
"nnoremap <leader>be :MBEToggle<CR>
"nnoremap <leader>bn :MBEbn<CR>
"nnoremap <leader>bp :MBEbp<CR>

"let g:miniBufExplorerAutoStart = 0
" }}}

